"""# Project Euler problem 12
# https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
import sys
import math


def GetNumberOfFactors(n):
  """GetNumberOfFactors returns the number of factors of an integer n.
  We simplify the search by noting that every factor has a pair and that the
  lower of the two factors must thus be < sqrt(n)+1. So, we search up to
  sqrt(n) + 1 and multiply the number of factors by 2."""
  factors = 0
  check = range(1, int(math.sqrt(n)+1))
  return sum([n % c == 0 for c in check])*2

if __name__ == "__main__":
  x = 1
  triangle = x
  while True:
    x += 1
    next_triangle = sum(range(1, x+1))
    n_factors = GetNumberOfFactors(next_triangle)
    if n_factors > 500:
      sys.stdout.write(("\rFirst triangle number with more than 500 factors is "
                        "%s.\n" % next_triangle))
      sys.stdout.flush()
      break
    sys.stdout.write("\rx = %s, factors = %s" % (x, n_factors))
    sys.stdout.flush()

# First triangle number with more than 500 factors is 76576500.